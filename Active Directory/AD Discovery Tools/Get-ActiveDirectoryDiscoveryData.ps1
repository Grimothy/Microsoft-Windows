$UtilityName = "ActiveDirectoryUtility"
$BaseUtilPath = "$env:SystemDrive\$UtilityName"

$LogPath = "$BaseUtilPath\logs\$(get-date -Format MM-dd-yyyy-hh-mm-ss)__log.txt"
Start-Transcript -Path $LogPath  -Append -Force

#Install required Powershell Module
if(-not (Get-Module PSMenu -ListAvailable)){
    Write-Host -ForegroundColor Magenta "PSMenu module not installed. Performing installation now..."
    Install-Module PSMenu -Scope CurrentUser -Force
    }

Function RDCD{
    [CmdletBinding()]
    param
    ( 
        #[Parameter(Mandatory=$True,HelpMessage="Please enter a name for the job and report generated by this script")]
        #[Parameter(Mandatory=$true)]
        #[int] $days # Used to located records older than the value specified
        [Parameter(Mandatory=$true,HelpMessage="Errors Only specifies whether or not to Display only errors reported by DCDIAG")]
        [ValidateSet('Yes','No')] # Specifies whether or not to prompt the user for the deletion of EACH AND EVERY DNS RECORD
        [string] $ErrorsOnly
    )

        
    $DomainControllers = Get-ADDomainController -Filter * | Select-Object Hostname, IPv4Address, OperatingSystem, site
    $DCObjects = Show-Menu -ItemFocusColor Green -MenuItems $DomainControllers.hostname -MultiSelect
        
    if ($ErrorsOnly -like "Yes")
    {
        foreach ($i in $DCObjects){
            Write-Host -ForegroundColor Green "Running DC Diagnostics on: "-NoNewline; 
            Write-Host -ForegroundColor Yellow "$i. "-NoNewline;
            Write-Host -ForegroundColor Green "This query will display " -NoNewline;
            Write-Host -ForegroundColor Magenta "ERRORS ONLY!!!!!"
            Start-Sleep -Seconds 2
            CMD /C dcdiag /q /S:$i
            Write-Host -ForegroundColor Green "Diagnostics complete please review"
        
        }
        pause
        BasicADHCMenu
    }else{
        foreach ($i in $DCObjects){
            Write-Host -ForegroundColor Green "Running DC Diagnostics on: "-NoNewline; 
            Write-Host -ForegroundColor Yellow "$i. "-NoNewline;
            Start-Sleep -Seconds 2
            CMD /C dcdiag /S:$i
            Write-Host -ForegroundColor Green "Diagnostics complete please review"
        
        }

    }
}
# Run Active Directory Domain Controller Diagnostics with Reporting funtion    
Function RDCDWR {
    [CmdletBinding()]
    param
    ( 
        [Parameter(Mandatory=$True,HelpMessage="Please enter a name for the job and report generated by this script")]
        [string] $JobReportName, # Name for the job and report generated by this script
        [Parameter(Mandatory=$True,HelpMessage="Please enter a name for the job and report generated by this script")]
        [string] $SubDir, # Name for the job and report generated by this script
        [string] $ReportPath = "$BaseUtilPath\$SubDir\$JobReportName", #location where DNS remove records and reports are stored. 
        [Parameter(Mandatory=$true,HelpMessage="Errors Only specifies whether or not to Display only errors reported by DCDIAG")]
        [ValidateSet('Yes','No')] # Specifies whether or not to prompt the user for the deletion of EACH AND EVERY DNS RECORD
        [string] $Reporting
    )
    Clear-Host
    Write-Host -ForegroundColor Cyan "Creating directories to store reports"
    Start-Sleep -Seconds 1
    New-Item -ItemType Directory -Path $ReportPath
    $DomainControllers = Get-ADDomainController -Filter * | Select-Object Hostname, IPv4Address, OperatingSystem, site
    $DCObjects = Show-Menu -ItemFocusColor Green -MenuItems $DomainControllers.hostname -MultiSelect
        
    if ($Reporting -like "Yes")
    {
        foreach ($i in $DCObjects){
            Write-Host -ForegroundColor Green "Creating a DC Diagnostics report for: "-NoNewline; 
            Write-Host -ForegroundColor Yellow "$i. "-NoNewline;
            Write-Host -ForegroundColor Green "This is a comprehensive query with DNS tests " -NoNewline
                
            Start-Sleep -Seconds 2
            CMD /C dcdiag/S:$i /c /v /f:"$ReportPath\$i-$(get-date -Format MM-dd-yyyy)__DCDIAG.log"
            Write-Host -ForegroundColor Green "Diagnostics complete"
    }else{
        BasicADHCMenu
         }

    }
    pause
    BasicADHCMenu
}
       
# Run View Active Directory Replication    
Function VDCR {
    [CmdletBinding()]
    param( 
        #[Parameter(Mandatory=$True,HelpMessage="Please enter a name for the job and report generated by this script")]
        #[string] $JobReportName, # Name for the job and report generated by this script
        #[Parameter(Mandatory=$True,HelpMessage="Please enter a name for the job and report generated by this script")]
        #[string] $SubDir, # Name for the job and report generated by this script
        #[string] $ReportPath = "$BaseUtilPath\$SubDir\$JobReportName", #location where DNS remove records and reports are stored. 
        #[Parameter(Mandatory=$true,HelpMessage="Errors Only specifies whether or not to Display only errors reported by DCDIAG")]
        #ValidateSet('Yes','No')] # Specifies whether or not to prompt the user for the deletion of EACH AND EVERY DNS RECORD
        #[string] $Reporting
    )
    Clear-Host
    #Write-Host -ForegroundColor Cyan "Creating directories to store reports"
    Start-Sleep -Seconds 1
    #New-Item -ItemType Directory -Path $ReportPath
    ##$DCObjects = Show-Menu -ItemFocusColor Green -MenuItems $DomainControllers.hostname -MultiSelect
    Write-Host -ForegroundColor Green "Running replication summary Job"
    Write-Host -ForegroundColor Yellow "The replsummary operation quickly and concisely summarizes the replication state and relative health of a forest"
    CMD /C repadmin /replsummary
    Write-Host -ForegroundColor Green "Replication summary completed!"
    pause
    BasicADHCMenu
} 

Function PERP {
    [CmdletBinding()]
    param( 
        #[Parameter(Mandatory=$True,HelpMessage="Please enter a name for the job and report generated by this script")]
        #[string] $JobReportName, # Name for the job and report generated by this script
        #[Parameter(Mandatory=$True,HelpMessage="Please enter a name for the job and report generated by this script")]
        #[string] $SubDir, # Name for the job and report generated by this script
        #[string] $ReportPath = "$BaseUtilPath\$SubDir\$JobReportName", #location where DNS remove records and reports are stored. 
        #[Parameter(Mandatory=$true,HelpMessage="Errors Only specifies whether or not to Display only errors reported by DCDIAG")]
        #ValidateSet('Yes','No')] # Specifies whether or not to prompt the user for the deletion of EACH AND EVERY DNS RECORD
        #[string] $Reporting
    )
    
} 

Function BasicADHCMenu {
    Clear-Host
    $MTBasicADHCMenu = "Basic Active Directory Health Checks"
    Write-Host -ForegroundColor Green "================$MTBasicADHCMenu================"
    $item = Show-Menu  -ItemFocusColor Green -ReturnIndex -MenuItems @(
        "Run Domain Controller Diagnostics",
        "Run Domain Controller Diagnostics -- Show Errors Only",
        "Generate Domain Controller Diagnostics Report",
        "View Domain Controller Replication",
        "Perform an Enterprise Replication Push",
        "Perform a Replication Pull", # Create Sub menu
        "Initiate KCC",
        "Get SYSVOL Migration State"
        "Return to main menu", # Create Sub menu
        $(Get-MenuSeparator),
        "Quit"
    )

    If ($item -eq 0)
    { 
        Write-Host -ForegroundColor Green "Run Domain Controller Diagnostics"
        Start-Sleep -seconds 1
        RDCD -ErrorsOnly No
        BasicADHCMenu
        
    }
    if ($item -eq 1)
    {
        Write-Host -ForegroundColor Green "Run Domain Controller Diagnostics -- Show Errors Only" 
        Start-Sleep -seconds 1
        RDCD -ErrorsOnly Yes
        BasicADHCMenu
    }
    if ($item -eq 2)
    {
        Write-Host -ForegroundColor Green "Generate Domain Controller Diagnostics Report"  
        Start-Sleep -seconds 1
        RDCDWR -Reporting Yes -SubDir "RDCDW_Reports"
    }
    if ($item -eq 3)
    {
        Write-Host -ForegroundColor Green "View Domain Controller Replication"  
        Start-Sleep -seconds 1
        VDCR
    }
    if ($item -eq 4)
    {
        Write-Host -ForegroundColor Green "Perform an Enterprise Replication Push"  
        Start-Sleep -seconds 1
    }
    if ($item -eq 5)
    {
        Write-Host -ForegroundColor Green "Perform a Replication Pull"  
        Start-Sleep -seconds 1
    }
    if ($item -eq 6)
    {
        Write-Host -ForegroundColor Green "Initiate KCC"  
        Start-Sleep -seconds 1
    }
    if ($item -eq 7)
    {
        Write-Host -ForegroundColor Green "Getting Sysvol Migration State..."
        Start-Sleep -seconds 1
        HomeMenu
    }
    if ($item -eq 8)
    {
        Write-Host -ForegroundColor Green "Returning to main menu"  
        Start-Sleep -seconds 1
        HomeMenu
    }
    if ($item -eq 9)
    {
        Write-Host -ForegroundColor Green "Quiting application"  
        Start-Sleep -seconds 1
    }
}


Function HomeMenu {
    Clear-Host
    Write-Host -ForegroundColor Green "================Active Directory Utility================" 
    
        $item = Show-Menu -ReturnIndex  -ItemFocusColor Green -MenuItems @(
            "Basic Active Directory Health Checks",
            "Active Directory Discovery",
            "Network time utilities",
            $(Get-MenuSeparator),
            "Quit"
        )

        If ($item -eq 0)
        { 
            Write-Host -ForegroundColor Green "Domain Controller Discovery Report has been selected"
            Start-Sleep -seconds 1
            BasicADHCMenu
        
        }
        if ($item -eq 1)
        {
            Write-Host -ForegroundColor Green "Quick Info has been selected" 
        }
        if ($item -eq 2)
        {
            Write-Host -ForegroundColor Green "Quiting application"  
        }
     
    
}

HomeMenu

