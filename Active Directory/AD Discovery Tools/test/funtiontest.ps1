$host.UI.RawUI.BackgroundColor = "black"
$UtilityName = "ActiveDirectoryUtility"
$BaseUtilPath = "$env:SystemDrive\$UtilityName"

function ADDR {
    param 
    (
        [CmdletBinding()]
        [Parameter(Mandatory=$True,HelpMessage="Please enter a name for the job and report generated by this script")]
        [string] $JobReportName, # Name for the job and report generated by this script
        [Parameter(Mandatory=$True,HelpMessage="Please enter a name for the job and report generated by this script")]
        [string] $SubDir, # Name for the job and report generated by this script
        [string] $ReportPath = "$BaseUtilPath\$SubDir\$JobReportName" #location where records and reports are stored. 
    )
    
    Clear-Host
    Write-Host -ForegroundColor Cyan "Creating directories to store reports"
    Start-Sleep -Seconds 1
    New-Item -ItemType Directory -Path $ReportPath

    Write-Host -ForegroundColor Green "######################################################################"
    Write-Host -ForegroundColor Green "#                        Gathering FSMO DATA                         #"
    Write-Host -ForegroundColor Green "######################################################################"   

    #$DomainFSMO = Get-ADDomain | Format-List InfrastructureMaster, RIDMaster, PDCEmulator
    #$DomainFSMO | Add-Content
    $FSMO = cmd /c netdom query FSMO |Out-String

    New-Item -ItemType File -Path $ReportPath\fsmo.txt

    Write-Host -ForegroundColor Green "The follow machine(s) are running FSMO Roles:"
    Write-Host -ForegroundColor Cyan $FSMO
    "The follow machine(s) are running FSMO Roles:"| Add-Content -Path $ReportPath\fsmo.txt
    $FSMO | Add-Content -Path $ReportPath\fsmo.txt 

    $DfsrMigrationState = cmd /c dfsrmig.exe /getglobalstate | Out-String
    Write-Host -ForegroundColor Green "######################################################################"
    Write-Host -ForegroundColor Green "#                        Gathering SYSVOL GLOBAL STATE               #"
    Write-Host -ForegroundColor Green "######################################################################"   
    Write-Host -ForegroundColor Cyan "Determining the curreent state of SYSVOL: " -NoNewline;
    Write-Host -ForegroundColor Yellow $DfsrMigrationState
    if ($DfsrMigrationState -like "*Eliminated*") 
        {
            Write-Host -ForegroundColor Green "SYSVOL Migration already completed"
            Start-Sleep  -Seconds 3
            "SYSVOL Migration already completed" | Add-Content -Path $ReportPath\SYSVOLMigrationStatus.txt
            $DfsrMigrationState | Add-Content -Path $ReportPath\SYSVOLMigrationStatus.txt
        }else{
            Write-Host -ForegroundColor Magenta "SYSVOL is not yet in an eliminated state and FRS may be still used!!"
            Start-Sleep -Seconds 3
            "SYSVOL is not yet in an eliminated state and FRS may be still used!!" | Add-Content -Path $ReportPath\SYSVOLMigrationStatus.txt

        }


    Write-Host -ForegroundColor Green       "######################################################################"
    Write-Host -ForegroundColor Green       "#                        Gathering NTP DATA                          #"
    Write-Host -ForegroundColor Green       "######################################################################"   
    
    $PDC = $(Get-ADDomain).PDCEmulator
    Write-Host -ForegroundColor Yellow "The PDC Emulator Role is hosted on " -NoNewline;
    write-host -ForegroundColor Magenta $PDC
    $DomainControllers = Get-ADDomainController -Filter * 
   
    #$DomainControllerHostnames = $DomainControllers.hostname
    foreach ($i in $DomainControllers.hostname)
    {
        "START OF W32TM REPORT FOR $i" | Add-Content -Path $ReportPath\NTP.txt
        Write-Host -ForegroundColor Yellow "Getting W32TM status on: " -NoNewline;
        Write-Host -ForegroundColor Magenta $i
        Write-Host -ForegroundColor Green "######################################################################"
        Start-Sleep -Seconds 2
        $W32tmStatus = CMD /C w32tm /query /computer:$i /status |Out-String
        Write-Host -ForegroundColor Yellow $W32tmStatus
        "######$i STATUS######" | Add-Content -Path $ReportPath\NTP.txt  
        $W32tmStatus | Add-Content -Path $ReportPath\NTP.txt 
        
        Write-Host -ForegroundColor Yellow "Getting W32TM CONFIGURATION on: " -NoNewline;
        Write-Host -ForegroundColor Magenta $i
        Write-Host -ForegroundColor Green "######################################################################" 
        Start-Sleep -Seconds 2
        $W32tmConfiguration = CMD /C w32tm /query /computer:$i /CONFIGURATION |Out-String
        Write-Host -ForegroundColor Green  $W32tmConfiguration      
        "######$i CONFIGURATION######" | Add-Content -Path $ReportPath\NTP.txt  
        $W32tmConfiguration| Add-Content -Path $ReportPath\NTP.txt 
        
        Write-Host -ForegroundColor Yellow "Getting W32TM SOURCE CONFIGURATION on: " -NoNewline;
        Write-Host -ForegroundColor Magenta $i
        Write-Host -ForegroundColor Green "######################################################################" 
        Start-Sleep -Seconds 2
        $W32tmConfiguration = CMD /C w32tm /query /computer:$i /Source |Out-String
        Write-Host -ForegroundColor Green  $W32tmConfiguration      
        "######$i SOURCE_CONFIGURATION######" | Add-Content  -Path $ReportPath\NTP.txt  
        $W32tmConfiguration| Add-Content -Path $ReportPath\NTP.txt 


        Write-Host -ForegroundColor Yellow "Getting W32TM PEERS on: " -NoNewline;
        Write-Host -ForegroundColor Magenta $i
        Write-Host -ForegroundColor Green "######################################################################" 
        Start-Sleep -Seconds 2
        $W32tmConfiguration = CMD /C w32tm /query /computer:$i /peers |Out-String
        Write-Host -ForegroundColor Green  $W32tmConfiguration      
        "######$i PEERS######" | Add-Content -Path $ReportPath\NTP.txt  
        $W32tmConfiguration| Add-Content -Path $ReportPath\NTP.txt 
          

    }
    write-host -ForegroundColor Green       "######################################################################"
    write-host -ForegroundColor Magenta     "#                 NTP Related discovery completed                    #"
    write-host -ForegroundColor Green       "######################################################################" 
    

    Write-Host -ForegroundColor Green       "######################################################################"
    Write-Host -ForegroundColor Green       "#           Getting Domain Controller Replication Health             #"
    Write-Host -ForegroundColor Green       "######################################################################" 

    Write-Host -ForegroundColor Green "Running replication summary Job"
    Write-Host -ForegroundColor Yellow "The replsummary operation quickly and concisely summarizes the replication state and relative health of a forest"
    CMD /C repadmin /replsummary | Add-Content -Path $ReportPath\Replication.txt 
    CMD /C repadmin /showrepl | Add-Content -Path $ReportPath\Replication.txt 
    Write-Host -ForegroundColor Green "Replication summary Completed"

    write-host -ForegroundColor Green       "######################################################################"
    write-host -ForegroundColor Magenta     "#             Replication Health Related discovery completed         #"
    write-host -ForegroundColor Green       "######################################################################"
    

    Write-Host -ForegroundColor Green       "############################################################################"
    Write-Host -ForegroundColor Green       "#                  Compiling Domain Controller Data                        #"
    Write-Host -ForegroundColor Magenta     "# This taks will capture the following details for each domain controller: #"
    Write-Host -ForegroundColor Cyan        "# 1. Comprehensive DC Diagnostics                                          #"
    Write-Host -ForegroundColor Cyan        "# 2. Network Configuration                                                 #"
    Write-Host -ForegroundColor Cyan        "# 3. Installed Roles and Features                                          #"
    Write-Host -ForegroundColor Cyan        "# 4. List of Installed Applications                                        #"
    Write-Host -ForegroundColor Cyan        "# 5. List of DNS Forwarders                                                #"
    Write-Host -ForegroundColor Green       "############################################################################" 

    
    
    $DomainControllers.hostname | ForEach-Object -Parallel  
        {
            $i = $DomainControllers.hostname   
               Start-Sleep -Seconds 5
            "Start of Comprehensive DC Diagnostics" | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            Write-Host -ForegroundColor Green "Start of Comprehensive DC Diagnostics on " -NoNewline;
            Write-Host -ForegroundColor Yellow $i
            "#######$i DCIAG START########" | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            CMD /C dcdiag/S:$i /c /v /f:"$ReportPath\$i-DomainControllerDiscoveryData.log"
            "#######$i DCIAG COMPLETE#####" | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            " " | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            " " | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            " " | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"

            Write-Host -ForegroundColor Green "Starting collection of network configuration details on " -NoNewline;
            Write-Host -ForegroundColor Yellow $i
            "#######$i NETWORK COLLECTION START########" | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            Enter-PSSession -ComputerName $i 
            $NETCollection = Get-NetIPAddress | Out-String
            Write-Host -ForegroundColor Yellow $NETCollection
            $NETCollection | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            "#######$i NETWORK COLLECTION COMPLETE########" | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            " " | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            " " | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            " " | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
        
            Write-Host -ForegroundColor Green "Starting collection of installed Roles and Features on " -NoNewline;
            Write-Host -ForegroundColor Yellow $i
            "#######$i INSTALLED ROLES AND FEATURES START########" | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            $InstalledRolesAndFeatures = Get-WindowsFeature | Where-Object {$_.installstate -eq "Installed"} | Out-String
            Write-Host -ForegroundColor Yellow $InstalledRolesAndFeatures
            $InstalledRolesAndFeatures | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            "#######$i INSTALLED ROLES AND FEATURES COMPLETE########" | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            " " | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            " " | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            " " | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"

            Write-Host -ForegroundColor Green "Starting collection of installed software on " -NoNewline;
            Write-Host -ForegroundColor Yellow $i
            "#######$i INSTALLED APPLICATIONS START########" | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            $InstalledSoftware = Get-InstalledSoftware | Out-String
            Write-Host -ForegroundColor Yellow $InstalledSoftware
            $InstalledSoftware |  Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            "#######$i INSTALLED APPLICATIONS COMPLETE########" | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            " " | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            " " | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            " " | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"


            Write-Host -ForegroundColor Green "Starting collection of DNS Forwarders on " -NoNewline;
            Write-Host -ForegroundColor Yellow $i
            "#######$i DNS FORWARDERS START########" | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            $DNSForwarders = Get-DnsServerForwarder | Out-String
            Write-Host -ForegroundColor Yellow $DNSForwarders 
            $DNSForwarders | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            "#######$i DNS FORWARDERS COMPLETE########" | Add-Content -Path "$ReportPath\$i-DomainControllerDiscoveryData.log"
            Exit-PSSession


        } 
       
    
    
    write-host -ForegroundColor Green       "######################################################################"
    write-host -ForegroundColor Magenta     "#             Domain Controller Data Compilation Completed           #"
    write-host -ForegroundColor Green       "######################################################################"
    Copy-Item -Path $LogPath -Destination $ReportPath -Force -Verbose

    $compress = @{
        Path = $ReportPath
        CompressionLevel = "Fastest"
        DestinationPath = "$ReportPath.zip"
      }
      Compress-Archive @compress -Verbose

    Pause
    BasicADHCMenu
}   